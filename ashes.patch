diff --git a/gradle.properties b/gradle.properties
index dcd22c1f1afbcdf583ebcbbdfd53735977d2114b..5f9736587ba98f6b0ec4d8b9bff6ea352191d561 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -30,30 +30,30 @@ loader_version_range=[47,)
 # You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
 # See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
 #
 # Parchment is an unofficial project maintained by ParchmentMC, separate from Minecraft Forge.
 # Additional setup is needed to use their mappings, see https://parchmentmc.org/docs/getting-started
 mapping_channel=official
 # The mapping version to query from the mapping channel.
 # This must match the format required by the mapping channel.
 mapping_version=1.20.1


 ## Mod Properties

 # The unique mod identifier for the mod. Must be lowercase in English locale. Must fit the regex [a-z][a-z0-9_]{1,63}
 # Must match the String constant located in the main mod class annotated with @Mod.
 mod_id=ashes2055
 # The human-readable display name for the mod.
 mod_name=Ashes 2055
 # The license of the mod. Review your options at https://choosealicense.com/. All Rights Reserved is the default.
 mod_license=All Rights Reserved
 # The mod version. See https://semver.org/
 mod_version=1.0.0
 # The group ID for the mod. It is only important when publishing as an artifact to a Maven repository.
 # This should match the base package used for the mod sources.
 # See https://maven.apache.org/guides/mini/guide-naming-conventions.html
-mod_group_id=com.example.examplemod
+mod_group_id=com.ashes2055
 # The authors of the mod. This is a simple text string that is used for display purposes in the mod list.
-mod_authors=YourNameHere, OtherNameHere
+mod_authors=Ashes2055 Team
 # The description of the mod. This is a simple multiline text string that is used for display purposes in the mod list.
-mod_description=Example mod description.\nNewline characters can be used and will be replaced properly.
\ No newline at end of file
+mod_description=Adds hostile raider factions. Created 2025.
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/src/main/java/com/ashes2055/Ashes2055.java b/src/main/java/com/ashes2055/Ashes2055.java
new file mode 100644
index 0000000000000000000000000000000000000000..e339b43c28c8fb1ec7b862fb7bb1d312df4850ea
--- /dev/null
+++ b/src/main/java/com/ashes2055/Ashes2055.java
@@ -0,0 +1,22 @@
+package com.ashes2055;
+
+import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.fml.common.Mod;
+import com.ashes2055.entity.ModEntities;
+import com.ashes2055.item.ModItems;
+import com.ashes2055.item.ModCreativeTabs;
+
+/**
+ * Main mod class for Ashes2055.
+ * Mod creation year: 2025
+ */
+@Mod(Ashes2055.MOD_ID)
+public class Ashes2055 {
+    public static final String MOD_ID = "ashes2055";
+
+    public Ashes2055(IEventBus modEventBus) {
+        ModEntities.ENTITY_TYPES.register(modEventBus);
+        ModItems.ITEMS.register(modEventBus);
+        ModCreativeTabs.TABS.register(modEventBus);
+    }
+}
diff --git a/src/main/java/com/ashes2055/client/renderer/RaiderRenderer.java b/src/main/java/com/ashes2055/client/renderer/RaiderRenderer.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7177198ce4ce44093f65db1f80220ec60f1efc5
--- /dev/null
+++ b/src/main/java/com/ashes2055/client/renderer/RaiderRenderer.java
@@ -0,0 +1,22 @@
+package com.ashes2055.client.renderer;
+
+import com.ashes2055.Ashes2055;
+import com.ashes2055.entity.RaiderEntity;
+import net.minecraft.client.model.PlayerModel;
+import net.minecraft.client.model.geom.ModelLayers;
+import net.minecraft.client.renderer.entity.EntityRendererProvider;
+import net.minecraft.client.renderer.entity.HumanoidMobRenderer;
+import net.minecraft.resources.ResourceLocation;
+
+public class RaiderRenderer extends HumanoidMobRenderer<RaiderEntity, PlayerModel<RaiderEntity>> {
+    private static final ResourceLocation TEXTURE = ResourceLocation.fromNamespaceAndPath(Ashes2055.MOD_ID, "textures/entity/raider/raider.png");
+
+    public RaiderRenderer(EntityRendererProvider.Context context) {
+        super(context, new PlayerModel<>(context.bakeLayer(ModelLayers.PLAYER), false), 0.5F);
+    }
+
+    @Override
+    public ResourceLocation getTextureLocation(RaiderEntity entity) {
+        return TEXTURE;
+    }
+}
diff --git a/src/main/java/com/ashes2055/entity/BulletEntity.java b/src/main/java/com/ashes2055/entity/BulletEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..f5cc2f3292c16a4e22ca666876006a259ae7748f
--- /dev/null
+++ b/src/main/java/com/ashes2055/entity/BulletEntity.java
@@ -0,0 +1,79 @@
+package com.ashes2055.entity;
+
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.phys.EntityHitResult;
+import net.minecraft.world.phys.HitResult;
+
+public class BulletEntity extends Projectile {
+    /** Speed of the bullet when fired. */
+    public static float SPEED = 3.0F;
+
+    private float damage = 2.0F;
+
+    public BulletEntity(EntityType<? extends BulletEntity> type, Level level) {
+        super(type, level);
+    }
+
+    public BulletEntity(Level level, LivingEntity shooter) {
+        this(ModEntities.BULLET.get(), level);
+        this.setOwner(shooter);
+        this.setPos(shooter.getX(), shooter.getEyeY() - 0.1, shooter.getZ());
+    }
+
+    public void setDamage(float damage) {
+        this.damage = damage;
+    }
+
+    @Override
+    protected void defineSynchedData() {
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        this.level().addParticle(ParticleTypes.SMOKE, this.getX(), this.getY(), this.getZ(), 0, 0, 0);
+        if (this.tickCount > 200) {
+            this.discard();
+        }
+    }
+
+    @Override
+    protected void onHitEntity(EntityHitResult result) {
+        super.onHitEntity(result);
+        if (result.getEntity() != null) {
+            var owner = this.getOwner() instanceof LivingEntity ? (LivingEntity) this.getOwner() : null;
+            result.getEntity().hurt(this.damageSources().mobProjectile(this, owner), damage);
+            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARROW_HIT, SoundSource.NEUTRAL, 1.0F, 1.0F);
+        }
+        this.discard();
+    }
+
+    @Override
+    protected void onHit(HitResult result) {
+        super.onHit(result);
+        if (result.getType() != HitResult.Type.ENTITY) {
+            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARROW_HIT, SoundSource.NEUTRAL, 1.0F, 1.0F);
+            this.discard();
+        }
+    }
+
+    @Override
+    protected void readAdditionalSaveData(CompoundTag tag) {
+    }
+
+    @Override
+    protected void addAdditionalSaveData(CompoundTag tag) {
+    }
+
+    @Override
+    public boolean isNoGravity() {
+        return true;
+    }
+}
diff --git a/src/main/java/com/ashes2055/entity/Faction.java b/src/main/java/com/ashes2055/entity/Faction.java
new file mode 100644
index 0000000000000000000000000000000000000000..593a0b07829e21bd391ae076b3c09497114d6515
--- /dev/null
+++ b/src/main/java/com/ashes2055/entity/Faction.java
@@ -0,0 +1,10 @@
+package com.ashes2055.entity;
+
+/**
+ * Enumeration of mob factions. Additional factions can be added later.
+ */
+public enum Faction {
+    RAIDERS,
+    SCAVS,
+    MERCENARIES
+}
diff --git a/src/main/java/com/ashes2055/entity/FactionMob.java b/src/main/java/com/ashes2055/entity/FactionMob.java
new file mode 100644
index 0000000000000000000000000000000000000000..0edbf62b08ad622e1b67e47551f6cf13a740900d
--- /dev/null
+++ b/src/main/java/com/ashes2055/entity/FactionMob.java
@@ -0,0 +1,44 @@
+package com.ashes2055.entity;
+
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.monster.Monster;
+import net.minecraft.world.level.Level;
+
+/**
+ * Base class for all faction mobs. Handles faction logic and friendly fire.
+ */
+public abstract class FactionMob extends Monster {
+    private final Faction faction;
+
+    protected FactionMob(EntityType<? extends Monster> entityType, Level level, Faction faction) {
+        super(entityType, level);
+        this.faction = faction;
+    }
+
+    public Faction getFaction() {
+        return faction;
+    }
+
+    @Override
+    public boolean isAlliedTo(Entity other) {
+        return other instanceof FactionMob && ((FactionMob) other).getFaction() == this.faction;
+    }
+
+    @Override
+    public boolean canAttack(LivingEntity target) {
+        return !isAlliedTo(target) && super.canAttack(target);
+    }
+
+    @Override
+    public boolean hurt(DamageSource source, float amount) {
+        Entity attacker = source.getEntity();
+        if (attacker instanceof FactionMob && ((FactionMob) attacker).getFaction() == this.faction) {
+            // Ignore friendly fire
+            return false;
+        }
+        return super.hurt(source, amount);
+    }
+}
diff --git a/src/main/java/com/ashes2055/entity/ModEntities.java b/src/main/java/com/ashes2055/entity/ModEntities.java
new file mode 100644
index 0000000000000000000000000000000000000000..39bdb28bd7f74c30092ecfd1a515ad600a1e9587
--- /dev/null
+++ b/src/main/java/com/ashes2055/entity/ModEntities.java
@@ -0,0 +1,25 @@
+package com.ashes2055.entity;
+
+import com.ashes2055.Ashes2055;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MobCategory;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.RegistryObject;
+
+public class ModEntities {
+    public static final DeferredRegister<EntityType<?>> ENTITY_TYPES =
+            DeferredRegister.create(ForgeRegistries.ENTITY_TYPES, Ashes2055.MOD_ID);
+
+    public static final RegistryObject<EntityType<RaiderEntity>> RAIDER = ENTITY_TYPES.register(
+            "raider", () -> EntityType.Builder.of(RaiderEntity::new, MobCategory.MONSTER)
+                    .sized(0.6F, 1.8F)
+                    .build("raider"));
+
+    public static final RegistryObject<EntityType<BulletEntity>> BULLET = ENTITY_TYPES.register(
+            "bullet", () -> EntityType.Builder.<BulletEntity>of(BulletEntity::new, MobCategory.MISC)
+                    .sized(0.25F, 0.25F)
+                    .clientTrackingRange(64)
+                    .updateInterval(1)
+                    .build("bullet"));
+}
diff --git a/src/main/java/com/ashes2055/entity/RaiderEntity.java b/src/main/java/com/ashes2055/entity/RaiderEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..323c0a77b2f2f3247a860ad90f5a417ac39fd8e9
--- /dev/null
+++ b/src/main/java/com/ashes2055/entity/RaiderEntity.java
@@ -0,0 +1,134 @@
+package com.ashes2055.entity;
+
+import net.minecraft.network.chat.Component;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.DifficultyInstance;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.goal.FloatGoal;
+import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
+import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
+import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
+import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
+import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.monster.Monster;
+import net.minecraft.world.entity.monster.RangedAttackMob;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundSource;
+
+/**
+ * Raider assault mob using a bullet projectile and leather armor.
+ */
+public class RaiderEntity extends FactionMob implements RangedAttackMob {
+    // Configurable parameters
+    public static final double MAX_HEALTH = 20.0D;
+    public static final double MOVE_SPEED = 0.25D;
+    public static final double ARMOR = 2.0D;
+    public static final double AGGRO_DISTANCE = 50.0D;
+    public static final float ATTACK_DISTANCE = 50.0F;
+    public static final int ATTACK_INTERVAL = 20; // ticks between shots
+    public static final int RELOAD_TIME = 40; // ticks to reload
+    public static final int MAGAZINE_SIZE = 30;
+    public static final float BULLET_DAMAGE = 4.0F;
+    public static final SoundEvent SHOOT_SOUND = SoundEvents.CROSSBOW_SHOOT;
+
+    private int shotsFired;
+    private int reloadTicks;
+
+    public RaiderEntity(EntityType<? extends RaiderEntity> entityType, Level level) {
+        super(entityType, level, Faction.RAIDERS);
+    }
+
+    @Override
+    protected void registerGoals() {
+        this.goalSelector.addGoal(0, new FloatGoal(this));
+        this.goalSelector.addGoal(2, new RangedAttackGoal(this, MOVE_SPEED, ATTACK_INTERVAL, ATTACK_DISTANCE));
+        this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
+        this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
+        this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
+
+        this.targetSelector.addGoal(1, new HurtByTargetGoal(this).setAlertOthers());
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Mob.class, true, mob -> !this.isAlliedTo(mob)));
+    }
+
+    public static AttributeSupplier.Builder createAttributes() {
+        return Monster.createMonsterAttributes()
+                .add(Attributes.MAX_HEALTH, MAX_HEALTH)
+                .add(Attributes.MOVEMENT_SPEED, MOVE_SPEED)
+                .add(Attributes.FOLLOW_RANGE, AGGRO_DISTANCE)
+                .add(Attributes.ARMOR, ARMOR);
+    }
+
+    @Override
+    public void performRangedAttack(LivingEntity target, float distanceFactor) {
+        if (reloadTicks > 0) {
+            return;
+        }
+        BulletEntity bullet = new BulletEntity(this.level(), this);
+        bullet.setDamage(BULLET_DAMAGE);
+        double d0 = target.getX() - this.getX();
+        double d1 = target.getEyeY() - bullet.getY();
+        double d2 = target.getZ() - this.getZ();
+        bullet.shoot(d0, d1, d2, BulletEntity.SPEED, 0.0F);
+        this.level().addFreshEntity(bullet);
+        this.level().playSound(null, this, SHOOT_SOUND, SoundSource.HOSTILE, 1.0F, 1.0F);
+        shotsFired++;
+        if (shotsFired % MAGAZINE_SIZE == 0) {
+            reloadTicks = RELOAD_TIME;
+        }
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        if (reloadTicks > 0) {
+            if (reloadTicks == RELOAD_TIME) {
+                broadcast("магазин вытащен");
+            } else if (reloadTicks == RELOAD_TIME / 2) {
+                broadcast("новый магазин вставлен");
+            } else if (reloadTicks == 1) {
+                broadcast("звук передергивания затвора");
+            }
+            reloadTicks--;
+        }
+    }
+
+    private void broadcast(String message) {
+        if (!this.level().isClientSide && this.level().getServer() != null) {
+            this.level().getServer().getPlayerList().broadcastSystemMessage(Component.literal(message), false);
+        }
+    }
+
+    @Override
+    public SpawnGroupData finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, MobSpawnType reason,
+                                        SpawnGroupData spawnData, CompoundTag data) {
+        SpawnGroupData spawnGroupData = super.finalizeSpawn(level, difficulty, reason, spawnData, data);
+        this.populateDefaultEquipmentSlots(level.getRandom(), difficulty);
+        this.populateDefaultEquipmentEnchantments(level.getRandom(), difficulty);
+        return spawnGroupData;
+    }
+
+    @Override
+    protected void populateDefaultEquipmentSlots(RandomSource random, DifficultyInstance difficulty) {
+        this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.BOW));
+        this.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.LEATHER_HELMET));
+        this.setItemSlot(EquipmentSlot.CHEST, new ItemStack(Items.LEATHER_CHESTPLATE));
+        this.setItemSlot(EquipmentSlot.LEGS, new ItemStack(Items.LEATHER_LEGGINGS));
+        this.setItemSlot(EquipmentSlot.FEET, new ItemStack(Items.LEATHER_BOOTS));
+    }
+}
diff --git a/src/main/java/com/ashes2055/event/ModClientEvents.java b/src/main/java/com/ashes2055/event/ModClientEvents.java
new file mode 100644
index 0000000000000000000000000000000000000000..f9d784de36b8962d73e1d2a65ec1f108224217d8
--- /dev/null
+++ b/src/main/java/com/ashes2055/event/ModClientEvents.java
@@ -0,0 +1,19 @@
+package com.ashes2055.event;
+
+import com.ashes2055.Ashes2055;
+import com.ashes2055.entity.ModEntities;
+import com.ashes2055.client.renderer.RaiderRenderer;
+import net.minecraft.client.renderer.entity.NoopRenderer;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.client.event.EntityRenderersEvent;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.fml.common.Mod;
+
+@Mod.EventBusSubscriber(modid = Ashes2055.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
+public class ModClientEvents {
+    @SubscribeEvent
+    public static void registerRenderers(EntityRenderersEvent.RegisterRenderers event) {
+        event.registerEntityRenderer(ModEntities.RAIDER.get(), RaiderRenderer::new);
+        event.registerEntityRenderer(ModEntities.BULLET.get(), NoopRenderer::new);
+    }
+}
diff --git a/src/main/java/com/ashes2055/event/ModEvents.java b/src/main/java/com/ashes2055/event/ModEvents.java
new file mode 100644
index 0000000000000000000000000000000000000000..403de9c5cadfd4a7ab3fc2e6dce239814023b0e4
--- /dev/null
+++ b/src/main/java/com/ashes2055/event/ModEvents.java
@@ -0,0 +1,16 @@
+package com.ashes2055.event;
+
+import com.ashes2055.Ashes2055;
+import com.ashes2055.entity.ModEntities;
+import com.ashes2055.entity.RaiderEntity;
+import net.minecraftforge.event.entity.EntityAttributeCreationEvent;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.fml.common.Mod;
+
+@Mod.EventBusSubscriber(modid = Ashes2055.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD)
+public class ModEvents {
+    @SubscribeEvent
+    public static void onAttributeCreate(EntityAttributeCreationEvent event) {
+        event.put(ModEntities.RAIDER.get(), RaiderEntity.createAttributes().build());
+    }
+}
diff --git a/src/main/java/com/ashes2055/item/ModCreativeTabs.java b/src/main/java/com/ashes2055/item/ModCreativeTabs.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b90cbcbcf2e90d8c521945328b156b870c023a4
--- /dev/null
+++ b/src/main/java/com/ashes2055/item/ModCreativeTabs.java
@@ -0,0 +1,23 @@
+package com.ashes2055.item;
+
+import com.ashes2055.Ashes2055;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.network.chat.Component;
+import net.minecraft.world.item.CreativeModeTab;
+import net.minecraft.world.item.ItemStack;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.RegistryObject;
+
+public class ModCreativeTabs {
+    public static final DeferredRegister<CreativeModeTab> TABS =
+            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, Ashes2055.MOD_ID);
+
+    public static final RegistryObject<CreativeModeTab> ASHES_TAB = TABS.register("ashes_tab",
+            () -> CreativeModeTab.builder()
+                    .title(Component.translatable("itemGroup.ashes2055"))
+                    .icon(() -> new ItemStack(ModItems.RAIDER_SPAWN_EGG.get()))
+                    .displayItems((params, output) -> {
+                        output.accept(ModItems.RAIDER_SPAWN_EGG.get());
+                    })
+                    .build());
+}
diff --git a/src/main/java/com/ashes2055/item/ModItems.java b/src/main/java/com/ashes2055/item/ModItems.java
new file mode 100644
index 0000000000000000000000000000000000000000..83d5b28fb7e969fc2fb811a67363ba4cba88c8ba
--- /dev/null
+++ b/src/main/java/com/ashes2055/item/ModItems.java
@@ -0,0 +1,18 @@
+package com.ashes2055.item;
+
+import com.ashes2055.Ashes2055;
+import com.ashes2055.entity.ModEntities;
+import net.minecraft.world.item.Item;
+import net.minecraftforge.common.ForgeSpawnEggItem;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.RegistryObject;
+
+public class ModItems {
+    public static final DeferredRegister<Item> ITEMS =
+            DeferredRegister.create(ForgeRegistries.ITEMS, Ashes2055.MOD_ID);
+
+    public static final RegistryObject<Item> RAIDER_SPAWN_EGG = ITEMS.register("raider_spawn_egg",
+            () -> new ForgeSpawnEggItem(ModEntities.RAIDER, 0x544F39, 0x8E8C71,
+                    new Item.Properties()));
+}
diff --git a/src/main/resources/assets/ashes2055/lang/en_us.json b/src/main/resources/assets/ashes2055/lang/en_us.json
new file mode 100644
index 0000000000000000000000000000000000000000..5b60a954ae46b74fc46198de6d4d2d681ffe74ae
--- /dev/null
+++ b/src/main/resources/assets/ashes2055/lang/en_us.json
@@ -0,0 +1,5 @@
+{
+  "entity.ashes2055.raider": "Raider",
+  "item.ashes2055.raider_spawn_egg": "Raider Spawn Egg",
+  "itemGroup.ashes2055": "Ashes2055"
+}
diff --git a/src/main/resources/assets/ashes2055/textures/entity/raider/.gitkeep b/src/main/resources/assets/ashes2055/textures/entity/raider/.gitkeep
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/src/main/resources/assets/ashes2055/textures/entity/raider/raider.png b/src/main/resources/assets/ashes2055/textures/entity/raider/raider.png
new file mode 100644
index 0000000000000000000000000000000000000000..d181015ee04239fd27b051016512046799a0e0e3
GIT binary patch
literal 68
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcv6U2?;<BGXrCWS|l%!
O#o+1c=d#Wzp$Py<BMTV-

literal 0
HcmV?d00001


